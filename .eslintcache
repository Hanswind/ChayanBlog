[{"C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\App.js":"1","C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\index.js":"2","C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\Nav.js":"3","C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\blogFirebase.js":"4","C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\Footer.js":"5","C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\Contents.js":"6","C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\Header.js":"7","C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\page\\auth\\Auth.js":"8","C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\page\\post\\Post.js":"9","C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\page\\write\\Write.js":"10","C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\page\\manage\\Manage.js":"11","C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\TocNav.js":"12","C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\page\\auth\\AuthForm.js":"13","C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\page\\preview\\Preview.js":"14","C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\page\\preview\\Notice.js":"15","C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\page\\auth\\AuthOuterForm.js":"16","C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\page\\write\\WriteForm.js":"17","C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\page\\write\\WriteInfo.js":"18","C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\page\\manage\\ManageCategory.js":"19","C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\page\\write\\WriteAddon.js":"20","C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\popup\\ProfilePopup.js":"21","C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\page\\manage\\ManageTag.js":"22","C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\page\\preview\\PreviewArticles.js":"23","C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\page\\preview\\PreviewInfo.js":"24","C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\page\\preview\\PreviewMenu.js":"25","C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\db\\CategoryDB.js":"26","C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\db\\TagDB.js":"27","C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\popup\\CatePopup.js":"28","C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\popup\\TagsPopup.js":"29","C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\page\\manage\\ManageNode.js":"30","C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\page\\preview\\PreviewArticle.js":"31"},{"size":3000,"mtime":1611817408599,"results":"32","hashOfConfig":"33"},{"size":400,"mtime":1611817425171,"results":"34","hashOfConfig":"33"},{"size":405,"mtime":1611816418835,"results":"35","hashOfConfig":"33"},{"size":773,"mtime":1611739035179,"results":"36","hashOfConfig":"33"},{"size":217,"mtime":1611651001047,"results":"37","hashOfConfig":"33"},{"size":563,"mtime":1611651001046,"results":"38","hashOfConfig":"33"},{"size":2677,"mtime":1611651001048,"results":"39","hashOfConfig":"33"},{"size":1422,"mtime":1611682959786,"results":"40","hashOfConfig":"33"},{"size":7793,"mtime":1611682959791,"results":"41","hashOfConfig":"33"},{"size":7260,"mtime":1611822110239,"results":"42","hashOfConfig":"33"},{"size":2352,"mtime":1611739035441,"results":"43","hashOfConfig":"33"},{"size":1204,"mtime":1609439952497,"results":"44","hashOfConfig":"33"},{"size":2411,"mtime":1611651001054,"results":"45","hashOfConfig":"33"},{"size":5501,"mtime":1611984950402,"results":"46","hashOfConfig":"33"},{"size":355,"mtime":1611651001060,"results":"47","hashOfConfig":"33"},{"size":1729,"mtime":1611651001054,"results":"48","hashOfConfig":"33"},{"size":4774,"mtime":1611915659121,"results":"49","hashOfConfig":"33"},{"size":6925,"mtime":1611914762247,"results":"50","hashOfConfig":"33"},{"size":3281,"mtime":1611739035442,"results":"51","hashOfConfig":"33"},{"size":1485,"mtime":1611822393290,"results":"52","hashOfConfig":"33"},{"size":3669,"mtime":1611651001070,"results":"53","hashOfConfig":"33"},{"size":2838,"mtime":1611739035443,"results":"54","hashOfConfig":"33"},{"size":1451,"mtime":1611983939391,"results":"55","hashOfConfig":"33"},{"size":521,"mtime":1611651001064,"results":"56","hashOfConfig":"33"},{"size":3638,"mtime":1611651001065,"results":"57","hashOfConfig":"33"},{"size":710,"mtime":1611651001050,"results":"58","hashOfConfig":"33"},{"size":592,"mtime":1611651001051,"results":"59","hashOfConfig":"33"},{"size":1786,"mtime":1611651001070,"results":"60","hashOfConfig":"33"},{"size":1383,"mtime":1611651001071,"results":"61","hashOfConfig":"33"},{"size":1897,"mtime":1611684417388,"results":"62","hashOfConfig":"33"},{"size":2707,"mtime":1611651001062,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"13wgbaf",{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"66"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"66"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"66"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"66"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"66"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"66"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"66"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"66"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"66"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"66"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"66"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"66"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"66"},"C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\App.js",[],["140","141"],"C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\index.js",[],"C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\Nav.js",["142"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Nav = () => {\r\n  return (\r\n    <div className=\"nav\">\r\n      <ul>\r\n        <li>\r\n          <Link to=\"/\">블로그</Link>\r\n        </li>\r\n        <li>\r\n          <a href=\"https://github.com/hchayan\" target=\"_blank\">\r\n            깃허브\r\n          </a>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Nav;\r\n","C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\blogFirebase.js",[],"C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\Footer.js",[],"C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\Contents.js",[],"C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\Header.js",["143","144"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport Nav from \"./Nav\";\r\nimport { Link } from \"react-router-dom\";\r\nimport ProfilePopup from \"./popup/ProfilePopup\";\r\n\r\nconst Header = ({ loggedIn, userObj, articles, bookmarks }) => {\r\n  const profileRef = useRef();\r\n  const [profilePopup, setProfilePopup] = useState(false);\r\n\r\n  const handleClickProfileOutside = ({ target }) => {\r\n    if (profilePopup && !profileRef.current.contains(target)) {\r\n      setProfilePopup(false);\r\n      window.removeEventListener(\"click\", handleClickProfileOutside);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (profilePopup) {\r\n      window.addEventListener(\"click\", handleClickProfileOutside);\r\n    }\r\n  }, [profilePopup]);\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"header-container\">\r\n        <div className=\"header__column\">\r\n          <div className=\" header-logo\">\r\n            <Link to=\"/\">\r\n              <img\r\n                alt=\"로고\"\r\n                src=\"https://firebasestorage.googleapis.com/v0/b/chayanblog.appspot.com/o/static%2Flogo.svg?alt=media&token=1506f45c-8be3-40b1-8bb1-2c55f750109e\"\r\n              />\r\n            </Link>\r\n          </div>\r\n          <Nav />\r\n        </div>\r\n\r\n        <div className=\"header__column\">\r\n          {loggedIn ? (\r\n            <>\r\n              <div className=\"write-post\">\r\n                {userObj && userObj.uid === process.env.REACT_APP_MASTERUID ? (\r\n                  <Link to=\"/write\">새 글 작성</Link>\r\n                ) : (\r\n                  <a onClick={() => alert(\"글을 작성할 권한이 없습니다.\")}>\r\n                    새 글 작성\r\n                  </a>\r\n                )}\r\n              </div>\r\n\r\n              <div\r\n                className=\"header-profile\"\r\n                onClick={() => setProfilePopup(true)}\r\n              >\r\n                {userObj && userObj.photoURL ? (\r\n                  <img alt=\"프로필\" src={userObj.photoURL} />\r\n                ) : (\r\n                  <i className=\"fas fa-user\"></i>\r\n                )}\r\n              </div>\r\n\r\n              {profilePopup ? (\r\n                <div className=\"profile-popup\" ref={profileRef}>\r\n                  <ProfilePopup\r\n                    userObj={userObj}\r\n                    articles={articles}\r\n                    bookmarks={bookmarks}\r\n                  />\r\n                </div>\r\n              ) : null}\r\n            </>\r\n          ) : (\r\n            <>\r\n              <div className=\"login\">\r\n                <Link to=\"/login\">로그인</Link>\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\page\\auth\\Auth.js",[],"C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\page\\post\\Post.js",["145","146","147","148"],"import React, { useEffect, useState, useRef, useMemo } from \"react\";\r\n\r\nimport {\r\n  dbService,\r\n  storageService,\r\n  firebaseInstance,\r\n} from \"../../../blogFirebase.js\";\r\nimport TocNav from \"../../../TocNav.js\";\r\n\r\nimport MDEditor from \"@uiw/react-md-editor\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n\r\nconst Post = ({ match, userObj, articleObj, setArticleObj }) => {\r\n  let history = useHistory();\r\n  const postID = match.params.id;\r\n  const tocRef = useRef();\r\n\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [postInfo, setPostInfo] = useState({});\r\n  const [marked, setMarked] = useState(false);\r\n\r\n  const checkBookmarked = async () => {\r\n    try {\r\n      if (userObj) {\r\n        await dbService\r\n          .collection(\"bookmark\")\r\n          .doc(userObj.uid)\r\n          .get()\r\n          .then(doc => {\r\n            if (doc.data().postsId.includes(articleObj.id)) {\r\n              setMarked(true);\r\n            } else {\r\n              setMarked(false);\r\n            }\r\n          });\r\n      }\r\n    } catch (error) {}\r\n  };\r\n\r\n  useEffect(() => {\r\n    checkBookmarked();\r\n  }, [loading]);\r\n\r\n  const bookmarkPost = async () => {\r\n    try {\r\n      if (userObj) {\r\n        const userBookmark = await dbService\r\n          .collection(\"bookmark\")\r\n          .doc(userObj.uid);\r\n\r\n        if (!marked) {\r\n          userBookmark.set({\r\n            postsId: firebaseInstance.firestore.FieldValue.arrayUnion(\r\n              articleObj.id\r\n            ),\r\n          });\r\n        } else {\r\n          userBookmark.set({\r\n            postsId: firebaseInstance.firestore.FieldValue.arrayRemove(\r\n              articleObj.id\r\n            ),\r\n          });\r\n        }\r\n        setMarked(prev => !prev);\r\n      } else {\r\n        alert(\"북마크를 하려면 로그인해야 합니다\");\r\n      }\r\n    } catch (error) {\r\n      alert(\"북마크 작업 실패\", error);\r\n    }\r\n  };\r\n\r\n  const insertTitleName = () => {\r\n    const toCheck = [\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"];\r\n    toCheck.forEach(checkTag => {\r\n      const title = document.querySelectorAll(checkTag);\r\n      title.forEach(node => {\r\n        node.setAttribute(\r\n          \"id\",\r\n          node.innerHTML.replace(/[\\s|?]/g, \"-\").toLowerCase()\r\n        );\r\n      });\r\n    });\r\n  };\r\n\r\n  const getPost = async () => {\r\n    try {\r\n      const post = await dbService\r\n        .collection(\"posts\")\r\n        .where(\"title\", \"==\", `# ${postID}`)\r\n        .get();\r\n\r\n      await post.forEach(doc => {\r\n        setPostInfo({\r\n          types: doc.data().postTypes,\r\n          title: doc.data().title,\r\n          date: doc.data().modifiedAt,\r\n          user: doc.data().userName,\r\n          tags: doc.data().postTag,\r\n          thumbnail: doc.data().thumbnailId,\r\n          contents: doc.data().contents,\r\n          objId: doc.data().objId,\r\n          likes: doc.data().likes,\r\n        });\r\n        setArticleObj({ id: doc.id, ...doc.data() });\r\n      });\r\n\r\n      setLoading(false);\r\n    } catch (error) {\r\n      alert(\"게시글을 불러오지 못했습니다 : \" + error.message);\r\n      history.push(\"/\");\r\n    }\r\n  };\r\n\r\n  const deletePost = async () => {\r\n    try {\r\n      if (window.confirm(\"정말로 게시글을 삭제 하시겠습니까?\")) {\r\n        // 게시글 사진 삭제\r\n        if (postInfo.thumbnail) {\r\n          await storageService.refFromURL(postInfo.thumbnail).delete();\r\n        }\r\n        // 게시글 object파일들 삭제\r\n        await postInfo[\"objId\"].forEach(obj => {\r\n          storageService.refFromURL(obj).delete();\r\n        });\r\n        // 게시글 삭제\r\n        await dbService.doc(`/posts/${articleObj.id}`).delete();\r\n\r\n        alert(\"게시글이 제거되었습니다.\");\r\n        history.push(\"/\");\r\n      }\r\n    } catch (error) {\r\n      alert(\"게시글 삭제하는데 실패했습니다 : \" + error);\r\n      history.push(\"/\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getPost();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    insertTitleName();\r\n  }, [loading]);\r\n\r\n  return (\r\n    <div className=\"post\">\r\n      {loading ? (\r\n        <div className=\"Loading\">{error}</div>\r\n      ) : (\r\n        <div className=\"post-wrapper\">\r\n          <div className=\"post-wrapper__column\">\r\n            <div className=\"post-head\">\r\n              <div className=\"post-categories\">\r\n                {postInfo[\"types\"] &&\r\n                  postInfo[\"types\"].map(type => {\r\n                    return (\r\n                      <div key={type} className=\"post-category\">\r\n                        {type}\r\n                      </div>\r\n                    );\r\n                  })}\r\n              </div>\r\n              <div className=\"post-title\">\r\n                {postInfo[\"title\"] && postInfo[\"title\"].substring(2)}\r\n              </div>\r\n              <div className=\"post-info\">\r\n                <div className=\"post-info__column\">\r\n                  <div className=\"post-tags\">\r\n                    {postInfo[\"tags\"] &&\r\n                      postInfo[\"tags\"].map(tag => {\r\n                        return (\r\n                          <div key={tag} className=\"post-tag\">\r\n                            {tag}\r\n                          </div>\r\n                        );\r\n                      })}\r\n                  </div>\r\n                </div>\r\n                <div className=\"post-info__column\">\r\n                  <div className=\"post-date\">\r\n                    {`${new Date(postInfo[\"date\"]).getFullYear()}년 ${\r\n                      new Date(postInfo[\"date\"]).getMonth() + 1\r\n                    }월 ${new Date(postInfo[\"date\"]).getDate()}일`}\r\n                  </div>\r\n                  <div className=\"post-user\">{postInfo[\"user\"]}</div>\r\n\r\n                  {articleObj &&\r\n                  userObj &&\r\n                  articleObj.userId === userObj.uid ? (\r\n                    <div className=\"post-manage\">\r\n                      <div className=\"post-edit\">\r\n                        <Link to=\"/edit\">수정</Link>\r\n                      </div>\r\n                      <div className=\"post-delete\" onClick={deletePost}>\r\n                        삭제\r\n                      </div>\r\n                    </div>\r\n                  ) : null}\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"post-main\">\r\n              <div className=\"post-toc\"></div>\r\n              <div className=\"post-thumbnail\">\r\n                <img src={postInfo[\"thumbnail\"]} alt=\"thumbnail\" />\r\n              </div>\r\n              <div className=\"post-contents\">\r\n                <div className=\"post-content\" ref={tocRef}>\r\n                  <MDEditor.Markdown source={postInfo[\"contents\"]} />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"post-sidebar\">\r\n              <div className=\"post__column\">\r\n                <div className=\"post-addon\">\r\n                  <div\r\n                    className=\"post-like\"\r\n                    title={marked ? \"글 북마크 취소\" : \"글 북마크\"}\r\n                    onClick={bookmarkPost}\r\n                  >\r\n                    {marked ? (\r\n                      <i class=\"fas fa-bookmark\"></i>\r\n                    ) : (\r\n                      <i class=\"far fa-bookmark\"></i>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"post__column\">\r\n                <TocNav\r\n                  tocRef={tocRef}\r\n                  url={match.params.id}\r\n                  mdContents={\r\n                    Object.keys(postInfo).length > 0 ? postInfo[\"contents\"] : \"\"\r\n                  }\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\page\\write\\Write.js",["149","150"],"import React, { useEffect, useState, useRef } from \"react\";\r\n\r\nimport { useHistory, Prompt } from \"react-router-dom\";\r\n\r\nimport { dbService, storageService } from \"../../../blogFirebase\";\r\n\r\nimport WriteInfo from \"./WriteInfo\";\r\nimport WriteForm from \"./WriteForm\";\r\nimport WriteAddon from \"./WriteAddon\";\r\n\r\nconst Write = ({ userObj, articleObj }) => {\r\n  const [thumbnailURL, setThumbnailURL] = useState(\"\");\r\n  const [objectURL, setObjectURL] = useState([]);\r\n  const [tags, setTags] = useState([]);\r\n  const [categories, setCategories] = useState([]);\r\n\r\n  const [markdownTitle, setMarkdownTitle] = useState(``);\r\n  const [markdownContent, setMarkdownContent] = useState(``);\r\n\r\n  const [isBlocking, setIsBlocking] = useState(true);\r\n  const [isUploadable, setIsUploadable] = useState(true);\r\n\r\n  // unmount 확인용\r\n  const thumbnailURLRef = useRef();\r\n  const objectURLRef = useRef();\r\n  const isBlockingRef = useRef();\r\n  thumbnailURLRef.current = thumbnailURL;\r\n  objectURLRef.current = objectURL;\r\n  isBlockingRef.current = isBlocking;\r\n\r\n  let history = useHistory();\r\n\r\n  // edit 기능\r\n  const loadArticle = () => {\r\n    if (\r\n      articleObj &&\r\n      articleObj !== null &&\r\n      Object.keys(articleObj).length > 0\r\n    ) {\r\n      setMarkdownTitle(articleObj.title.substring(2));\r\n      setMarkdownContent(articleObj.contents);\r\n      setThumbnailURL(articleObj.thumbnailId);\r\n      setTags(articleObj.postTag);\r\n      setCategories(articleObj.postTypes);\r\n    }\r\n  };\r\n\r\n  // 글의 user와 현재로그인되있는 user 일치하는지 확인 (불일치시 article로)\r\n  const checkUserVaild = () => {\r\n    if (articleObj === null) {\r\n      alert(\"게시글을 새로고침하면 오류 발생 \");\r\n      history.push(\"/\");\r\n    }\r\n\r\n    if (\r\n      articleObj &&\r\n      articleObj !== null &&\r\n      Object.keys(articleObj).length > 0 &&\r\n      articleObj.userId !== userObj.uid\r\n    ) {\r\n      alert(\"글을 수정할 권한이 없습니다\");\r\n      history.push(\"/\");\r\n    }\r\n    loadArticle();\r\n  };\r\n\r\n  useEffect(() => {\r\n    checkUserVaild();\r\n  }, []);\r\n\r\n  // 로컬 이미지 업로드\r\n  const onChangeImage = async e => {\r\n    try {\r\n      const {\r\n        target: { files },\r\n      } = e;\r\n\r\n      const theFile = files[0];\r\n\r\n      return new Promise((resolve, reject) => {\r\n        const reader = new FileReader(); // 공식 File API\r\n        reader.readAsDataURL(theFile);\r\n\r\n        reader.onerror = () => {\r\n          reject(false);\r\n        };\r\n        reader.onloadend = finishedEvent => {\r\n          // 아래 readURL 종료후 실행\r\n          const {\r\n            currentTarget: { result }, // result = finishedEvent.currantTarget.result\r\n          } = finishedEvent;\r\n\r\n          resolve(result);\r\n        };\r\n      });\r\n    } catch (error) {\r\n      alert(\"이미지를 불러오는데 오류가 발생했습니다. 오류코드 : \" + error);\r\n    }\r\n  };\r\n\r\n  const checkSubmitVaild = () => {\r\n    if (markdownTitle.length === 0) {\r\n      return \"게시글의 제목이 없습니다.\";\r\n    }\r\n\r\n    if (markdownContent.length === 0) {\r\n      return \"게시글의 내용이 없습니다.\";\r\n    }\r\n\r\n    if (categories.length === 0) {\r\n      return \"게시글은 무조건 카테고리를 지정해줘야 합니다.\";\r\n    }\r\n  };\r\n\r\n  const writePostOnDB = async () => {\r\n    try {\r\n      // 1. 정말로 게시할지 물어보기\r\n      if (window.confirm(\"작성하신 게시글을 정말로 게시하시겠습니까?\")) {\r\n        const vaild = checkSubmitVaild();\r\n        if (vaild) {\r\n          alert(vaild);\r\n        } else {\r\n          // 2.db에 게시글 정보 업로드\r\n          await dbService.collection(\"posts\").add({\r\n            thumbnailId: thumbnailURL,\r\n            objId: objectURL,\r\n            postTag: tags,\r\n            postTypes: categories,\r\n            title: `# ${markdownTitle}`,\r\n            contents: markdownContent,\r\n            createdAt: Date.now(),\r\n            modifiedAt: Date.now(),\r\n            userId: userObj.uid,\r\n            userName: userObj.displayName,\r\n            userImage: userObj.photoURL,\r\n            commentsId: [],\r\n          });\r\n\r\n          history.push(\"/\");\r\n          alert(\"게시글이 작성되었습니다\");\r\n        }\r\n      }\r\n    } catch (error) {\r\n      alert(\"게시글을 작성하는데 오류가 발생했습니다. 오류코드 : \" + error);\r\n    }\r\n  };\r\n\r\n  const editPostOnDB = async () => {\r\n    try {\r\n      if (window.confirm(\"정말로 게시글을 수정 하시겠습니까?\")) {\r\n        const vaild = checkSubmitVaild();\r\n        if (vaild) {\r\n          alert(vaild);\r\n        } else {\r\n          await dbService.doc(`/posts/${articleObj.id}`).update({\r\n            thumbnailId: thumbnailURL,\r\n            objId: objectURL,\r\n            postTag: tags,\r\n            postTypes: categories,\r\n            title: `# ${markdownTitle}`,\r\n            contents: markdownContent,\r\n            modifiedAt: Date.now(),\r\n          });\r\n\r\n          history.push(\"/\");\r\n          alert(\"게시글이 수정되었습니다\");\r\n        }\r\n      }\r\n    } catch (error) {\r\n      alert(\"게시글을 수정하는데 오류가 발생했습니다. 오류코드 : \" + error);\r\n    }\r\n  };\r\n\r\n  // 게시글 업로드\r\n  const onSubmit = e => {\r\n    e.preventDefault();\r\n    setIsBlocking(false);\r\n\r\n    if (Object.keys(articleObj).length === 0) {\r\n      writePostOnDB();\r\n    } else {\r\n      editPostOnDB();\r\n    }\r\n  };\r\n\r\n  const unExpectedExit = async () => {\r\n    if (isBlockingRef.current) {\r\n      if (thumbnailURLRef.current.length > 0) {\r\n        await storageService.refFromURL(thumbnailURLRef.current).delete();\r\n      }\r\n      if (objectURLRef.current.length > 0) {\r\n        await objectURLRef.current.forEach(objectRef => {\r\n          storageService.refFromURL(objectRef).delete();\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    return () => unExpectedExit();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"write\">\r\n      <div className=\"write__column\">\r\n        <WriteInfo\r\n          userObj={userObj}\r\n          thumbnailURL={thumbnailURL}\r\n          onChangeImage={onChangeImage}\r\n          setThumbnailURL={setThumbnailURL}\r\n          markdownTitle={markdownTitle}\r\n          setMarkdownTitle={setMarkdownTitle}\r\n          markdownContent={markdownContent}\r\n          setMarkdownContent={setMarkdownContent}\r\n          categories={categories}\r\n          setCategories={setCategories}\r\n          tags={tags}\r\n          setTags={setTags}\r\n          onSubmit={onSubmit}\r\n          isUploadable={isUploadable}\r\n          setIsUploadable={setIsUploadable}\r\n          isBlocking={isBlocking}\r\n        />\r\n      </div>\r\n      <div className=\"write__column\">\r\n        <WriteForm\r\n          userObj={userObj}\r\n          onChangeImage={onChangeImage}\r\n          objectURL={objectURL}\r\n          setObjectURL={setObjectURL}\r\n          markdownContent={markdownContent}\r\n          setMarkdownContent={setMarkdownContent}\r\n          setIsUploadable={setIsUploadable}\r\n        />\r\n      </div>\r\n      <Prompt\r\n        when={isBlocking}\r\n        message=\"정말로 페이지를 나가시겠습니까?  페이지를 나가면 작성중인 페이지를 읽어버립니다\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Write;\r\n","C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\page\\manage\\Manage.js",["151","152"],"import React, { useState, useEffect } from \"react\";\r\nimport { useHistory, Prompt } from \"react-router-dom\";\r\nimport { saveDBCategory } from \"components/db/CategoryDB.js\";\r\nimport { saveDBTag } from \"components/db/TagDB.js\";\r\nimport ManageCategory from \"./ManageCategory\";\r\nimport ManageTag from \"./ManageTag\";\r\n\r\nconst Manage = ({ userObj, articles }) => {\r\n  let history = useHistory();\r\n\r\n  const [categories, setCategories] = useState([]);\r\n  const [tags, setTags] = useState([]);\r\n\r\n  const getCategoryNames = async () => {\r\n    let categoryNames = [];\r\n    await categories.forEach(category => {\r\n      categoryNames.push(category.text);\r\n    });\r\n\r\n    return categoryNames;\r\n  };\r\n\r\n  const getTagNames = async () => {\r\n    let tagNames = [];\r\n    await tags.forEach(tag => {\r\n      tagNames.push(tag.text);\r\n    });\r\n\r\n    return tagNames;\r\n  };\r\n\r\n  // save\r\n  const saveCategory = async () => {\r\n    const categoryNames = await getCategoryNames();\r\n    await saveDBCategory(categoryNames);\r\n  };\r\n\r\n  const saveTag = async () => {\r\n    const tagNames = await getTagNames();\r\n    await saveDBTag(tagNames);\r\n  };\r\n\r\n  const saveStatic = async () => {\r\n    try {\r\n      await saveCategory();\r\n      await saveTag();\r\n      alert(\"저장되었습니다\");\r\n    } catch (error) {\r\n      alert(\"저장중에 문제가 발생했습니다. \" + error.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"manage\">\r\n      <div className=\"manage__column\">\r\n        <div className=\"manage-header\">\r\n          <div className=\"manage-dummy\"></div>\r\n          <h2 className=\"manage-title\">관리 및 설정</h2>\r\n          <div className=\"manage-save\" onClick={saveStatic}>\r\n            저장\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"manage__column\">\r\n        <ManageCategory\r\n          articles={articles}\r\n          categories={categories}\r\n          setCategories={setCategories}\r\n          getCategoryNames={getCategoryNames}\r\n        />\r\n      </div>\r\n      <div className=\"manage__column\">\r\n        <ManageTag tags={tags} setTags={setTags} getTagNames={getTagNames} />\r\n      </div>\r\n      <Prompt\r\n        // when={isBlocking}\r\n        message=\"정말로 페이지를 나가시겠습니까?  페이지를 나가면 수정한 내용이 초기화됩니다\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Manage;\r\n","C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\TocNav.js",["153","154","155","156"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport Toc from \"react-toc-hash-link\";\r\nimport { HashLink as Link } from \"react-router-hash-link\";\r\n\r\nconst TocNav = ({ tocRef, url, mdContents }) => {\r\n  const navref = useRef();\r\n  const [contentFlag, setContentFlag] = useState(false);\r\n  const [tocContent, setTocContent] = useState([]);\r\n\r\n  // contents = html in container\r\n  const getTitle = async () => {\r\n    const contents = tocRef.current;\r\n    // contents dom to stirng\r\n    if (contents !== null) {\r\n      const titleRegex = /<[hH][\\d](.*?[hH][\\d]>)/g;\r\n      const titles = await contents.matchAll(titleRegex);\r\n\r\n      for (let title of titles) {\r\n        const tag = title[0].substring(1, 3);\r\n        const id = title[0].match(/\".+\"/)[0];\r\n        console.log(tag);\r\n      }\r\n    }\r\n  };\r\n\r\n  const test = () => {\r\n    setContentFlag(true);\r\n    setTocContent(document.querySelectorAll(\".post-toc a\"));\r\n  };\r\n\r\n  useEffect(() => {\r\n    test();\r\n  }, [contentFlag]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"nav-toc\" ref={navref}>\r\n        {mdContents !== \"\" ? <Toc markdownText={mdContents} url={url} /> : null}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TocNav;\r\n","C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\page\\auth\\AuthForm.js",[],"C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\page\\preview\\Preview.js",["157","158","159","160","161"],"C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\page\\preview\\Notice.js",[],"C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\page\\auth\\AuthOuterForm.js",[],"C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\page\\write\\WriteForm.js",["162","163","164","165","166","167"],"import React, { useEffect, useState } from \"react\";\r\n\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { storageService } from \"../../../blogFirebase\";\r\nimport WriteAddon from \"./WriteAddon\";\r\n\r\nimport MDEditor, {\r\n  commands,\r\n  ICommand,\r\n  TextState,\r\n  TextApi,\r\n} from \"@uiw/react-md-editor\";\r\n\r\nconst WriteForm = ({\r\n  userObj,\r\n  onChangeImage,\r\n  objectURL,\r\n  setObjectURL,\r\n  markdownContent,\r\n  setMarkdownContent,\r\n  setIsUploadable,\r\n}) => {\r\n  const uploadImage = async e => {\r\n    try {\r\n      setIsUploadable(false);\r\n\r\n      if (e) {\r\n        const result = await onChangeImage(e);\r\n\r\n        if (result) {\r\n          const attachmentRef = storageService\r\n            .ref()\r\n            .child(`/posts/images/${userObj.uid}/${uuidv4()}`); // 저장경로설정 '사용자id/랜덤파일이름'\r\n          const response = await attachmentRef.putString(result, \"data_url\"); // (저장할파일, 데이터 형식)\r\n          const imageURL = await response.ref.getDownloadURL();\r\n\r\n          setObjectURL([...objectURL, imageURL]);\r\n          setIsUploadable(true);\r\n          return imageURL;\r\n        }\r\n      }\r\n    } catch (error) {\r\n      alert(\"이미지를 추가하는데 오류가 발생했습니다. 에러코드 : \" + error);\r\n    }\r\n    setIsUploadable(true);\r\n    return null;\r\n  };\r\n\r\n  const getImageURL = async (e, handle) => {\r\n    const url = await uploadImage(e);\r\n    handle.textApi.replaceSelection(`![](${url})\\n`);\r\n    handle.close();\r\n  };\r\n\r\n  return (\r\n    <MDEditor\r\n      value={markdownContent}\r\n      onChange={setMarkdownContent}\r\n      height={810}\r\n      commands={[\r\n        // title tags\r\n        commands.group(\r\n          [\r\n            commands.title1,\r\n            commands.title2,\r\n            commands.title3,\r\n            commands.title4,\r\n            commands.title5,\r\n            commands.title6,\r\n          ],\r\n          {\r\n            name: \"title\",\r\n            groupName: \"title\",\r\n            buttonProps: { \"aria-label\": \"Insert title\" },\r\n          }\r\n        ),\r\n\r\n        commands.group([], {\r\n          name: \"update\",\r\n          groupName: \"update\",\r\n          icon: (\r\n            <svg viewBox=\"0 0 1024 1024\" width=\"12\" height=\"12\">\r\n              <path\r\n                fill=\"currentColor\"\r\n                d=\"M716.8 921.6a51.2 51.2 0 1 1 0 102.4H307.2a51.2 51.2 0 1 1 0-102.4h409.6zM475.8016 382.1568a51.2 51.2 0 0 1 72.3968 0l144.8448 144.8448a51.2 51.2 0 0 1-72.448 72.3968L563.2 541.952V768a51.2 51.2 0 0 1-45.2096 50.8416L512 819.2a51.2 51.2 0 0 1-51.2-51.2v-226.048l-57.3952 57.4464a51.2 51.2 0 0 1-67.584 4.2496l-4.864-4.2496a51.2 51.2 0 0 1 0-72.3968zM512 0c138.6496 0 253.4912 102.144 277.1456 236.288l10.752 0.3072C924.928 242.688 1024 348.0576 1024 476.5696 1024 608.9728 918.8352 716.8 788.48 716.8a51.2 51.2 0 1 1 0-102.4l8.3968-0.256C866.2016 609.6384 921.6 550.0416 921.6 476.5696c0-76.4416-59.904-137.8816-133.12-137.8816h-97.28v-51.2C691.2 184.9856 610.6624 102.4 512 102.4S332.8 184.9856 332.8 287.488v51.2H235.52c-73.216 0-133.12 61.44-133.12 137.8816C102.4 552.96 162.304 614.4 235.52 614.4l5.9904 0.3584A51.2 51.2 0 0 1 235.52 716.8C105.1648 716.8 0 608.9728 0 476.5696c0-132.1984 104.8064-239.872 234.8544-240.2816C258.5088 102.144 373.3504 0 512 0z\"\r\n              />\r\n            </svg>\r\n          ),\r\n          children: handle => {\r\n            return (\r\n              <div\r\n                className=\"addon-upload-image\"\r\n                style={{ width: 250, padding: 10 }}\r\n              >\r\n                <div className=\"addon-upload-image-title\">사진 업로드</div>\r\n\r\n                <input\r\n                  type=\"file\"\r\n                  id=\"local-image\"\r\n                  onChange={e => getImageURL(e, handle)}\r\n                  accept=\"image/*\"\r\n                />\r\n                <div\r\n                  className=\"addon-upload-image-close\"\r\n                  onClick={() => handle.close()}\r\n                >\r\n                  x 닫기\r\n                </div>\r\n              </div>\r\n            );\r\n          },\r\n          execute: (state, api) => {},\r\n\r\n          buttonProps: { \"aria-label\": \"Insert title\" },\r\n        }),\r\n\r\n        commands.divider,\r\n        commands.bold,\r\n        commands.italic,\r\n        commands.strikethrough,\r\n        commands.hr,\r\n        commands.divider,\r\n        commands.link,\r\n        commands.quote,\r\n        commands.code,\r\n        commands.image,\r\n        commands.divider,\r\n        commands.unorderedListCommand,\r\n        commands.orderedListCommand,\r\n        commands.checkedListCommand,\r\n        commands.divider,\r\n        commands.codeEdit,\r\n        commands.codeLive,\r\n        commands.codePreview,\r\n        commands.divider,\r\n        commands.fullscreen,\r\n      ]}\r\n    />\r\n  );\r\n};\r\n\r\nexport default WriteForm;\r\n","C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\page\\write\\WriteInfo.js",["168","169","170"],"import React, { useState, useEffect, useRef } from \"react\";\r\n\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { storageService } from \"../../../blogFirebase\";\r\nimport TagsPopup from \"../../popup/TagsPopup\";\r\nimport CatePopup from \"../../popup/CatePopup\";\r\n\r\nconst WriteInfo = ({\r\n  userObj,\r\n  onChangeImage,\r\n  markdownTitle,\r\n  setMarkdownTitle,\r\n  markdownContent,\r\n  setMarkdownContent,\r\n  thumbnailURL,\r\n  setThumbnailURL,\r\n  tags,\r\n  setTags,\r\n  categories,\r\n  setCategories,\r\n  onSubmit,\r\n  isUploadable,\r\n  setIsUploadable,\r\n  isBlocking,\r\n}) => {\r\n  const categoryRef = useRef();\r\n  const tagRef = useRef();\r\n  const [tagPopup, setTagPopup] = useState(false); // 태그 창 열기\r\n  const [catePopup, setCatePopup] = useState(false); // 카테고리 창 열기\r\n\r\n  // model\r\n  const handleClickCategoryOutside = ({ target }) => {\r\n    if (\r\n      catePopup &&\r\n      categoryRef.current &&\r\n      !categoryRef.current.contains(target)\r\n    ) {\r\n      setCatePopup(false);\r\n      window.removeEventListener(\"click\", handleClickCategoryOutside);\r\n    }\r\n  };\r\n\r\n  const handleClickTagOutside = ({ target }) => {\r\n    if (tagPopup && !tagRef.current.contains(target)) {\r\n      setTagPopup(false);\r\n      window.removeEventListener(\"click\", handleClickTagOutside);\r\n    }\r\n  };\r\n\r\n  const removeTag = e => {\r\n    const name = e.target.parentNode.getAttribute(\"name\");\r\n\r\n    setTags(tags => tags.filter(tag => tag !== name));\r\n  };\r\n\r\n  const removeCate = e => {\r\n    const name = e.target.parentNode.getAttribute(\"name\");\r\n\r\n    setCategories(categories => categories.filter(cate => cate !== name));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (catePopup) {\r\n      window.addEventListener(\"click\", handleClickCategoryOutside);\r\n    }\r\n  }, [catePopup]);\r\n\r\n  useEffect(() => {\r\n    if (tagPopup) {\r\n      window.addEventListener(\"click\", handleClickTagOutside);\r\n    }\r\n  }, [tagPopup]);\r\n\r\n  // 게시글 제목 적용\r\n  const onChangeTitle = e => {\r\n    const {\r\n      target: { value },\r\n    } = e;\r\n\r\n    // 제목용 '# '를 최초 한번만 찾는 정규식\r\n    //const titleRegex = new RegExp(\"(.*-1.*|.*# .*)\");\r\n    setMarkdownTitle(value);\r\n  };\r\n\r\n  const uploadThumbnail = async e => {\r\n    try {\r\n      setIsUploadable(false);\r\n      if (e) {\r\n        const result = await onChangeImage(e);\r\n\r\n        if (thumbnailURL !== \"\") {\r\n          try {\r\n            await deleteThumbnail();\r\n          } catch (error) {}\r\n        }\r\n\r\n        // 업로드\r\n        if (result) {\r\n          const attachmentRef = storageService\r\n            .ref()\r\n            .child(`/posts/thumbnails/${userObj.uid}/${uuidv4()}`); // 저장경로설정 '사용자id/랜덤파일이름'\r\n          const response = await attachmentRef.putString(result, \"data_url\"); // (저장할파일, 데이터 형식)\r\n          const tmpThumbnailURL = await response.ref.getDownloadURL();\r\n          setThumbnailURL(tmpThumbnailURL);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      alert(\"썸네일 이미지를 업로드하는데 오류가 발생했습니다 : \" + error);\r\n    }\r\n    setIsUploadable(true);\r\n  };\r\n\r\n  const deleteThumbnail = async () => {\r\n    await storageService.refFromURL(thumbnailURL).delete();\r\n  };\r\n\r\n  return (\r\n    <div className=\"write-form\">\r\n      <form onSubmit={onSubmit}>\r\n        <div className=\"write-title\">\r\n          <div className=\"write-title__column addon\"></div>\r\n          <div className=\"write-title__column\">게시글 작성</div>\r\n          <div className=\"write-title__column submits\">\r\n            {isUploadable ? (\r\n              <button type=\"submit\">완료</button>\r\n            ) : (\r\n              <button>대기</button>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"write-contents\">\r\n          <div className=\"write-form__column\">\r\n            <div className=\"write-thumbnail\">\r\n              <div className=\"thumbnail-preview\">\r\n                {thumbnailURL !== \"\" ? <img src={thumbnailURL} /> : null}\r\n                <label htmlFor=\"write-thumbnail\">\r\n                  {thumbnailURL !== \"\" ? null : \"썸네일 업로드\"}\r\n                </label>\r\n                <input\r\n                  type=\"file\"\r\n                  id=\"write-thumbnail\"\r\n                  accept=\"image/*\"\r\n                  onChange={uploadThumbnail}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"write-form__column\">\r\n            <div className=\"write-category\">\r\n              <div className=\"cate-lists\">\r\n                {categories.map(category => {\r\n                  return (\r\n                    <div className=\"cate-list\">\r\n                      {category}\r\n                      <div\r\n                        className=\"cate-delete\"\r\n                        name={category}\r\n                        onClick={removeCate}\r\n                      >\r\n                        <i className=\"fas fa-times\"></i>\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n              {catePopup ? (\r\n                <CatePopup\r\n                  cates={categories}\r\n                  setCates={setCategories}\r\n                  setCatePopup={setCatePopup}\r\n                  categoryRef={categoryRef}\r\n                />\r\n              ) : null}\r\n              <div\r\n                className=\"write-cate-tags\"\r\n                onClick={() => {\r\n                  setCatePopup(true);\r\n                }}\r\n              >\r\n                카테고리 선택\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"form-title\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"제목을 입력하세요\"\r\n                onChange={onChangeTitle}\r\n                value={markdownTitle}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"write-tags\">\r\n              <div className=\"tags-list\">\r\n                {tags.map(tag => {\r\n                  return (\r\n                    <div className=\"tag-list\" name={tag}>\r\n                      {tag}\r\n                      <div\r\n                        className=\"tag-delete\"\r\n                        name={tag}\r\n                        onClick={removeTag}\r\n                      >\r\n                        <i className=\"fas fa-times\"></i>\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n              {tagPopup ? (\r\n                <TagsPopup tags={tags} setTags={setTags} tagRef={tagRef} />\r\n              ) : null}\r\n              <div\r\n                className=\"write-add-tags\"\r\n                onClick={() => {\r\n                  setTagPopup(true);\r\n                }}\r\n              >\r\n                태그 추가\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WriteInfo;\r\n","C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\page\\manage\\ManageCategory.js",["171","172","173"],"import React, { useState, useEffect, useCallback } from \"react\";\r\nimport update from \"immutability-helper\";\r\nimport ManageNode from \"./ManageNode\";\r\nimport { addDBCategory, loadDBCategory } from \"components/db/CategoryDB.js\";\r\n\r\nconst ManageCategory = ({\r\n  articles,\r\n  categories,\r\n  setCategories,\r\n  getCategoryNames,\r\n}) => {\r\n  const [inputCategory, setInputCategory] = useState(\"\");\r\n\r\n  // load\r\n  const loadCategory = async () => {\r\n    const loadedDBCategory = await loadDBCategory();\r\n\r\n    await loadedDBCategory.forEach((text, i) => {\r\n      setCategories(prev => [...prev, { id: i, text }]);\r\n    });\r\n  };\r\n\r\n  // onChange\r\n  const onChangeAddCategory = e => {\r\n    setInputCategory(e.target.value);\r\n  };\r\n\r\n  // remove\r\n  const removeCategory = async e => {\r\n    try {\r\n      const removeCategory =\r\n        e.target.parentNode.parentNode.childNodes[1].innerHTML;\r\n      if (window.confirm(`정말로 '${removeCategory}' 를 삭제하시겠습니까 ?`)) {\r\n        setCategories(\r\n          categories.filter(category => category.text !== removeCategory)\r\n        );\r\n\r\n        alert(\"카테고리명이 삭제되었습니다.\");\r\n      }\r\n    } catch (error) {\r\n      alert(\"카테고리를 삭제하는데 실패했습니다. \" + error.message);\r\n    }\r\n  };\r\n\r\n  // add\r\n  const isVaildCategory = categoryNames => {\r\n    inputCategory.trim();\r\n    if (inputCategory.length === 0) {\r\n      return \"공백은 입력할 수 없습니다\";\r\n    } else if (categoryNames.includes(inputCategory)) {\r\n      return \"이미 존재하는 카테고리명입니다\";\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const addCategory = async () => {\r\n    const categoryNames = await getCategoryNames();\r\n\r\n    const vaild = isVaildCategory(categoryNames);\r\n    if (!vaild) {\r\n      //await addDBCategory(categoryNames, inputCategory);\r\n\r\n      setCategories([\r\n        ...categories,\r\n        { id: categories.length, text: inputCategory },\r\n      ]);\r\n      setInputCategory(\"\");\r\n    } else {\r\n      alert(vaild);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadCategory();\r\n  }, []);\r\n\r\n  // dnd\r\n  const moveCategory = useCallback(\r\n    (dragIndex, hoverIndex) => {\r\n      const dragNode = categories[dragIndex];\r\n      setCategories(\r\n        update(categories, {\r\n          $splice: [\r\n            [dragIndex, 1],\r\n            [hoverIndex, 0, dragNode],\r\n          ],\r\n        })\r\n      );\r\n    },\r\n    [categories]\r\n  );\r\n\r\n  return (\r\n    <div className=\"manage-categories\">\r\n      <h2 className=\"category-name\">카테고리 관리</h2>\r\n\r\n      <div className=\"category-lists\">\r\n        <div className=\"category-add\">\r\n          <input\r\n            type=\"text\"\r\n            value={inputCategory}\r\n            onChange={onChangeAddCategory}\r\n            placeholder=\"추가할 카테고리명을 작성해주세요\"\r\n          />\r\n          <input type=\"button\" value=\"추가\" onClick={addCategory} />\r\n        </div>\r\n        {categories.map((category, i) => (\r\n          <ManageNode\r\n            key={category.id}\r\n            index={i}\r\n            text={category.text}\r\n            moveNode={moveCategory}\r\n            accept=\"category\"\r\n            removeList={removeCategory}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ManageCategory;\r\n","C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\page\\write\\WriteAddon.js",[],"C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\popup\\ProfilePopup.js",["174"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { authService } from \"../../blogFirebase.js\";\r\n\r\nconst ProfilePopup = ({ userObj, articles, bookmarks }) => {\r\n  // 프로필 닉네임 수정\r\n  const [nameChangeState, setNameChangeState] = useState(false);\r\n  const [newDisplayName, setNewDisplayName] = useState(\r\n    userObj ? userObj.displayName : null\r\n  );\r\n  const [postCount, setPostCount] = useState(0);\r\n  const [bookmarkCount, setBookmarkCount] = useState(0);\r\n\r\n  const getPostCount = () => {\r\n    setPostCount(\r\n      articles.filter(article => article.userId === userObj.uid).length\r\n    );\r\n  };\r\n\r\n  const getBookmarkCount = () => {\r\n    setBookmarkCount(bookmarks.length);\r\n  };\r\n\r\n  const onChangeDisplayName = e => {\r\n    const {\r\n      target: { value },\r\n    } = e;\r\n    setNewDisplayName(value);\r\n  };\r\n\r\n  const onChangeImg = async () => {\r\n    alert(\"프로필 이미지 변경 업데이트 예정\");\r\n  };\r\n\r\n  const onClickNameChange = e => {\r\n    e.preventDefault();\r\n    setNameChangeState(!nameChangeState);\r\n  };\r\n\r\n  const onSubmitName = async e => {\r\n    e.preventDefault();\r\n\r\n    if (userObj.displayName !== newDisplayName) {\r\n      await userObj.updateProfile({\r\n        displayName: newDisplayName,\r\n      });\r\n    }\r\n\r\n    setNameChangeState(!nameChangeState);\r\n  };\r\n\r\n  // 로그아웃\r\n  const onLogOutClick = () => {\r\n    authService.signOut();\r\n    alert(\"로그아웃 되었습니다\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    getPostCount();\r\n    getBookmarkCount();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"profile-popup--container\">\r\n      <div className=\"profile-popup__column\">\r\n        <div className=\"profile-img\">\r\n          <div className=\"profile-img--info\">\r\n            {userObj && userObj.photoURL ? (\r\n              <img alt=\"프로필\" src={userObj.photoURL} />\r\n            ) : (\r\n              <i class=\"fas fa-user\"></i>\r\n            )}\r\n          </div>\r\n\r\n          <label htmlFor=\"profile_file\">업로드</label>\r\n          <input\r\n            id=\"profile_file\"\r\n            type=\"file\"\r\n            accept=\"image/*\"\r\n            onChange={onChangeImg}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"profile-popup__column\">\r\n        <div className=\"profile-info\">\r\n          <div className=\"profile-name\">\r\n            {nameChangeState ? (\r\n              <form onSubmit={onSubmitName}>\r\n                <input\r\n                  onChange={onChangeDisplayName}\r\n                  type=\"text\"\r\n                  placeholder=\"닉네임\"\r\n                  value={newDisplayName}\r\n                />\r\n                <button className=\"profile-name--edit\">변경</button>\r\n              </form>\r\n            ) : (\r\n              <form onSubmit={onClickNameChange}>\r\n                <p>{userObj ? userObj.displayName : \"익명\"}</p>\r\n                <button className=\"profile-name--edit\">수정</button>\r\n              </form>\r\n            )}\r\n          </div>\r\n          <div className=\"profile-email\">{userObj ? userObj.email : null}</div>\r\n          <div className=\"profile-postInfo\">\r\n            <div className=\"post-count\">글 {postCount}</div>\r\n            <div className=\"comment-count\">북마크 {bookmarkCount}</div>\r\n          </div>\r\n          <div className=\"profile-nav\">\r\n            <button className=\"profile-info-edit\">\r\n              <Link to=\"/setting\">설정</Link>\r\n            </button>\r\n            <button className=\"profile-logout\" onClick={onLogOutClick}>\r\n              로그아웃\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfilePopup;\r\n","C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\page\\manage\\ManageTag.js",["175","176"],"import React, { useState, useEffect, useCallback } from \"react\";\r\nimport update from \"immutability-helper\";\r\nimport ManageNode from \"./ManageNode\";\r\nimport { addDBTag, loadDBTag } from \"components/db/TagDB.js\";\r\n\r\nconst ManageTag = ({ tags, setTags, getTagNames }) => {\r\n  const [inputTag, setInputTag] = useState(\"\");\r\n\r\n  // load\r\n  const loadTag = async () => {\r\n    const loadedDBTag = await loadDBTag();\r\n\r\n    loadedDBTag.forEach((text, i) => {\r\n      setTags(prev => [...prev, { id: i, text }]);\r\n    });\r\n  };\r\n\r\n  // onChange\r\n  const onChangeAddTag = e => {\r\n    setInputTag(e.target.value);\r\n  };\r\n\r\n  // remove\r\n  const removeTag = async e => {\r\n    try {\r\n      const removeTag = e.target.parentNode.parentNode.childNodes[1].innerHTML;\r\n      if (window.confirm(`정말로 '${removeTag}' 를 삭제하시겠습니까 ?`)) {\r\n        setTags(tags.filter(tag => tag.text !== removeTag));\r\n\r\n        alert(\"태그명이 삭제되었습니다.\");\r\n      }\r\n    } catch (error) {\r\n      alert(\"카테고리를 삭제하는데 실패했습니다. \" + error.message);\r\n    }\r\n  };\r\n\r\n  // add\r\n  const isVaildTag = tagNames => {\r\n    inputTag.trim();\r\n    if (inputTag.length === 0) {\r\n      return \"공백은 입력할 수 없습니다\";\r\n    } else if (tagNames.includes(inputTag)) {\r\n      return \"이미 존재하는 태그명입니다\";\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const addTag = async () => {\r\n    const tagNames = await getTagNames();\r\n\r\n    const vaild = isVaildTag(tagNames);\r\n    if (!vaild) {\r\n      await addDBTag(tagNames, inputTag);\r\n\r\n      setTags([...tags, { id: tags.length, text: inputTag }]);\r\n      setInputTag(\"\");\r\n    } else {\r\n      alert(vaild);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadTag();\r\n  }, []);\r\n\r\n  // dnd\r\n  const moveTag = useCallback(\r\n    (dragIndex, hoverIndex) => {\r\n      const dragNode = tags[dragIndex];\r\n      setTags(\r\n        update(tags, {\r\n          $splice: [\r\n            [dragIndex, 1],\r\n            [hoverIndex, 0, dragNode],\r\n          ],\r\n        })\r\n      );\r\n    },\r\n    [tags]\r\n  );\r\n\r\n  return (\r\n    <div className=\"manage-tags\">\r\n      <h2 className=\"tag-name\">태그 관리</h2>\r\n\r\n      <div className=\"tag-lists\">\r\n        <div className=\"tag-add\">\r\n          <input\r\n            type=\"text\"\r\n            value={inputTag}\r\n            onChange={onChangeAddTag}\r\n            placeholder=\"추가할 카테고리명을 작성해주세요\"\r\n          />\r\n          <input type=\"button\" value=\"추가\" onClick={addTag} />\r\n        </div>\r\n        {tags.map((tag, i) => (\r\n          <ManageNode\r\n            key={tag.id}\r\n            index={i}\r\n            text={tag.text}\r\n            moveNode={moveTag}\r\n            accept=\"tag\"\r\n            removeList={removeTag}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ManageTag;\r\n","C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\page\\preview\\PreviewArticles.js",["177"],"C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\page\\preview\\PreviewInfo.js",[],"C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\page\\preview\\PreviewMenu.js",["178"],"import React, { useState, useEffect } from \"react\";\r\nimport { HashLink as Link } from \"react-router-hash-link\";\r\nimport { dbService } from \"../../../blogFirebase.js\";\r\n\r\nconst PreviewMenu = ({\r\n  setSelectedCategory,\r\n  searchKeyword,\r\n  setSearchKeyword,\r\n  filterArticlesWithSearch,\r\n  filterArticleWithBookMark,\r\n  loggedIn,\r\n  onlyMarkCheck,\r\n  setOnlyMarkCheck,\r\n}) => {\r\n  const [menuNav, setMenuNav] = useState([]);\r\n  const [selectedTag, setSelectedTag] = useState(\"title\");\r\n\r\n  const loadDBCategory = async () => {\r\n    try {\r\n      const dbLoadCategories = await dbService\r\n        .collection(\"statics\")\r\n        .doc(\"categories\")\r\n        .get();\r\n      setMenuNav(dbLoadCategories.data().name);\r\n    } catch (error) {\r\n      alert(\"카테고리 목록을 불러오는데 실패했습니다\");\r\n    }\r\n  };\r\n\r\n  const onChangeSearch = e => {\r\n    setSearchKeyword(e.target.value);\r\n  };\r\n\r\n  const onChangeCategory = e => {\r\n    setSelectedCategory(e.target.value);\r\n  };\r\n\r\n  const onChangeTag = e => {\r\n    setSelectedTag(e.target.value);\r\n  };\r\n\r\n  const onChangeMarkCheck = () => {\r\n    if (loggedIn) {\r\n      setOnlyMarkCheck(prev => !prev);\r\n    } else {\r\n      alert(\"로그인이 필요한 기능입니다\");\r\n    }\r\n  };\r\n\r\n  const searchArticles = async keyword => {\r\n    await filterArticlesWithSearch(keyword);\r\n    setSearchKeyword(\"\");\r\n  };\r\n\r\n  const checkedOnlyBookMark = () => {\r\n    filterArticleWithBookMark(onlyMarkCheck);\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadDBCategory();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    checkedOnlyBookMark();\r\n  }, [onlyMarkCheck]);\r\n\r\n  return (\r\n    <div className=\"preview-menu\">\r\n      <div className=\"preview-menu__column\">\r\n        <div className=\"preview-menu-nav\">\r\n          <select onChange={onChangeCategory}>\r\n            <option value=\"all\">전체</option>\r\n            {menuNav.map(menu => {\r\n              return <option value={menu}>{menu}</option>;\r\n            })}\r\n          </select>\r\n          <ul>\r\n            {menuNav.map(menu => {\r\n              return (\r\n                <li>\r\n                  <Link to={`/category/${menu.tag}`}>{menu.name}</Link>\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        </div>\r\n        <div className=\"preview-options\">\r\n          <div className=\"preview-option\">\r\n            <div\r\n              className={\r\n                onlyMarkCheck\r\n                  ? \"preview-option-bookmark checked\"\r\n                  : \"preview-option-bookmark\"\r\n              }\r\n              onClick={onChangeMarkCheck}\r\n              title=\"북마크한 글\"\r\n            >\r\n              {onlyMarkCheck ? (\r\n                <i class=\"fas fa-bookmark\"></i>\r\n              ) : (\r\n                <i class=\"far fa-bookmark\"></i>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"preview-menu__column\">\r\n        <div className=\"search-bar\">\r\n          <select onChange={onChangeTag}>\r\n            <option value=\"title\">제목</option>\r\n            <option value=\"tag\">태그</option>\r\n          </select>\r\n          <input\r\n            type=\"text\"\r\n            onChange={onChangeSearch}\r\n            placeholder={`원하는 ${\r\n              selectedTag === \"title\" ? \"제목을\" : \"태그를\"\r\n            } 검색하세요`}\r\n            value={searchKeyword}\r\n          />\r\n          <input\r\n            type=\"button\"\r\n            value=\"검색\"\r\n            onClick={() => searchArticles(selectedTag)}\r\n          />\r\n        </div>\r\n        <div className=\"menu-more\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PreviewMenu;\r\n","C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\db\\CategoryDB.js",[],"C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\db\\TagDB.js",[],"C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\popup\\CatePopup.js",[],"C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\popup\\TagsPopup.js",[],"C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\page\\manage\\ManageNode.js",[],"C:\\Users\\Chayan\\Desktop\\chayan_blog\\src\\components\\page\\preview\\PreviewArticle.js",["179"],"import React from \"react\";\r\nimport MDEditor from \"@uiw/react-md-editor\";\r\nimport { LazyLoadImage } from \"react-lazy-load-image-component\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst PreviewArticle = ({ article, marked }) => {\r\n  return (\r\n    <Link to={`/post/${article.title.substring(2)}`}>\r\n      <div className=\"preview__article\">\r\n        {marked ? (\r\n          <div className=\"article-marked\">\r\n            <i class=\"fas fa-bookmark\"></i>\r\n          </div>\r\n        ) : null}\r\n        {article.thumbnailId !== \"\" ? (\r\n          <div className=\"article-thumbnail\">\r\n            <LazyLoadImage\r\n              alt=\"thumbnail\"\r\n              src={article.thumbnailId}\r\n              effect=\"opacity\"\r\n            />\r\n\r\n            <div className=\"article-categories\">\r\n              {article.postTypes.map(type => {\r\n                return (\r\n                  <div key={type} className=\"article-category\">\r\n                    {type}\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div className=\"article-no-thumbnail\">\r\n            <div className=\"article-categories\">\r\n              {article.postTypes.map(type => {\r\n                return (\r\n                  <div key={type} className=\"article-category\">\r\n                    {type}\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"article-title\">{article.title.substring(2)}</div>\r\n        <div className=\"article-contents\">\r\n          <MDEditor.Markdown source={article.contents} />\r\n        </div>\r\n        {article.thumbnailId === \"\" ? (\r\n          <div className=\"article-blank\"></div>\r\n        ) : null}\r\n        <div className=\"article-tags\">\r\n          {article.postTag.map(tag => {\r\n            return (\r\n              <div key={tag} className=\"article-tag\">\r\n                {tag}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n\r\n        <div className=\"article-info\">\r\n          <div className=\"article-modifiedAt\">\r\n            {`${new Date(article.modifiedAt).getFullYear()}년 ${\r\n              new Date(article.modifiedAt).getMonth() + 1\r\n            }월 ${new Date(article.modifiedAt).getDate()}일`}\r\n          </div>\r\n          <div\r\n            className=\"article-user\"\r\n            title={article.userName ? article.userName : \"익명\"}\r\n          >\r\n            {article.userImage ? (\r\n              <img src={article.userImage} />\r\n            ) : (\r\n              <i className=\"fas fa-user\"></i>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default PreviewArticle;\r\n",{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","replacedBy":"183"},{"ruleId":"184","severity":1,"message":"185","line":12,"column":11,"nodeType":"186","endLine":12,"endColumn":64},{"ruleId":"187","severity":1,"message":"188","line":21,"column":6,"nodeType":"189","endLine":21,"endColumn":20,"suggestions":"190"},{"ruleId":"191","severity":1,"message":"192","line":45,"column":19,"nodeType":"186","endLine":45,"endColumn":64},{"ruleId":"193","severity":1,"message":"194","line":1,"column":46,"nodeType":"195","messageId":"196","endLine":1,"endColumn":53},{"ruleId":"193","severity":1,"message":"197","line":19,"column":17,"nodeType":"195","messageId":"196","endLine":19,"endColumn":25},{"ruleId":"187","severity":1,"message":"198","line":43,"column":6,"nodeType":"189","endLine":43,"endColumn":15,"suggestions":"199"},{"ruleId":"187","severity":1,"message":"200","line":141,"column":6,"nodeType":"189","endLine":141,"endColumn":8,"suggestions":"201"},{"ruleId":"193","severity":1,"message":"202","line":9,"column":8,"nodeType":"195","messageId":"196","endLine":9,"endColumn":18},{"ruleId":"187","severity":1,"message":"203","line":69,"column":6,"nodeType":"189","endLine":69,"endColumn":8,"suggestions":"204"},{"ruleId":"193","severity":1,"message":"205","line":1,"column":27,"nodeType":"195","messageId":"196","endLine":1,"endColumn":36},{"ruleId":"193","severity":1,"message":"206","line":9,"column":7,"nodeType":"195","messageId":"196","endLine":9,"endColumn":14},{"ruleId":"193","severity":1,"message":"207","line":3,"column":22,"nodeType":"195","messageId":"196","endLine":3,"endColumn":26},{"ruleId":"193","severity":1,"message":"208","line":8,"column":10,"nodeType":"195","messageId":"196","endLine":8,"endColumn":20},{"ruleId":"193","severity":1,"message":"209","line":11,"column":9,"nodeType":"195","messageId":"196","endLine":11,"endColumn":17},{"ruleId":"193","severity":1,"message":"210","line":20,"column":15,"nodeType":"195","messageId":"196","endLine":20,"endColumn":17},{"ruleId":"187","severity":1,"message":"211","line":146,"column":6,"nodeType":"189","endLine":146,"endColumn":8,"suggestions":"212"},{"ruleId":"187","severity":1,"message":"213","line":150,"column":6,"nodeType":"189","endLine":150,"endColumn":44,"suggestions":"214"},{"ruleId":"187","severity":1,"message":"215","line":154,"column":6,"nodeType":"189","endLine":154,"endColumn":15,"suggestions":"216"},{"ruleId":"187","severity":1,"message":"217","line":158,"column":6,"nodeType":"189","endLine":158,"endColumn":24,"suggestions":"218"},{"ruleId":"187","severity":1,"message":"219","line":162,"column":6,"nodeType":"189","endLine":162,"endColumn":25,"suggestions":"220"},{"ruleId":"193","severity":1,"message":"205","line":1,"column":17,"nodeType":"195","messageId":"196","endLine":1,"endColumn":26},{"ruleId":"193","severity":1,"message":"221","line":1,"column":28,"nodeType":"195","messageId":"196","endLine":1,"endColumn":36},{"ruleId":"193","severity":1,"message":"202","line":5,"column":8,"nodeType":"195","messageId":"196","endLine":5,"endColumn":18},{"ruleId":"193","severity":1,"message":"222","line":9,"column":3,"nodeType":"195","messageId":"196","endLine":9,"endColumn":11},{"ruleId":"193","severity":1,"message":"223","line":10,"column":3,"nodeType":"195","messageId":"196","endLine":10,"endColumn":12},{"ruleId":"193","severity":1,"message":"224","line":11,"column":3,"nodeType":"195","messageId":"196","endLine":11,"endColumn":10},{"ruleId":"187","severity":1,"message":"225","line":66,"column":6,"nodeType":"189","endLine":66,"endColumn":17,"suggestions":"226"},{"ruleId":"187","severity":1,"message":"227","line":72,"column":6,"nodeType":"189","endLine":72,"endColumn":16,"suggestions":"228"},{"ruleId":"229","severity":1,"message":"230","line":135,"column":40,"nodeType":"186","endLine":135,"endColumn":66},{"ruleId":"193","severity":1,"message":"231","line":4,"column":10,"nodeType":"195","messageId":"196","endLine":4,"endColumn":23},{"ruleId":"187","severity":1,"message":"232","line":75,"column":6,"nodeType":"189","endLine":75,"endColumn":8,"suggestions":"233"},{"ruleId":"187","severity":1,"message":"234","line":90,"column":5,"nodeType":"189","endLine":90,"endColumn":17,"suggestions":"235"},{"ruleId":"187","severity":1,"message":"236","line":61,"column":6,"nodeType":"189","endLine":61,"endColumn":8,"suggestions":"237"},{"ruleId":"187","severity":1,"message":"238","line":64,"column":6,"nodeType":"189","endLine":64,"endColumn":8,"suggestions":"239"},{"ruleId":"187","severity":1,"message":"240","line":79,"column":5,"nodeType":"189","endLine":79,"endColumn":11,"suggestions":"241"},{"ruleId":"187","severity":1,"message":"242","line":32,"column":6,"nodeType":"189","endLine":32,"endColumn":16,"suggestions":"243"},{"ruleId":"187","severity":1,"message":"244","line":65,"column":6,"nodeType":"189","endLine":65,"endColumn":21,"suggestions":"245"},{"ruleId":"229","severity":1,"message":"230","line":76,"column":15,"nodeType":"186","endLine":76,"endColumn":46},"no-native-reassign",["246"],"no-negated-in-lhs",["247"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleClickProfileOutside'. Either include it or remove the dependency array.","ArrayExpression",["248"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-unused-vars","'useMemo' is defined but never used.","Identifier","unusedVar","'setError' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'checkBookmarked'. Either include it or remove the dependency array.",["249"],"React Hook useEffect has a missing dependency: 'getPost'. Either include it or remove the dependency array.",["250"],"'WriteAddon' is defined but never used.","React Hook useEffect has a missing dependency: 'checkUserVaild'. Either include it or remove the dependency array.",["251"],"'useEffect' is defined but never used.","'history' is assigned a value but never used.","'Link' is defined but never used.","'tocContent' is assigned a value but never used.","'getTitle' is assigned a value but never used.","'id' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'addArticles'. Either include it or remove the dependency array.",["252"],"React Hook useEffect has a missing dependency: 'filterArticles'. Either include it or remove the dependency array.",["253"],"React Hook useMemo has a missing dependency: 'reverseArticles'. Either include it or remove the dependency array.",["254"],"React Hook useMemo has a missing dependency: 'countPosts'. Either include it or remove the dependency array.",["255"],"React Hook useEffect has a missing dependency: 'getUserBookMark'. Either include it or remove the dependency array.",["256"],"'useState' is defined but never used.","'ICommand' is defined but never used.","'TextState' is defined but never used.","'TextApi' is defined but never used.","React Hook useEffect has a missing dependency: 'handleClickCategoryOutside'. Either include it or remove the dependency array.",["257"],"React Hook useEffect has a missing dependency: 'handleClickTagOutside'. Either include it or remove the dependency array.",["258"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'addDBCategory' is defined but never used.","React Hook useEffect has a missing dependency: 'loadCategory'. Either include it or remove the dependency array.",["259"],"React Hook useCallback has a missing dependency: 'setCategories'. Either include it or remove the dependency array. If 'setCategories' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["260"],"React Hook useEffect has missing dependencies: 'getBookmarkCount' and 'getPostCount'. Either include them or remove the dependency array.",["261"],"React Hook useEffect has a missing dependency: 'loadTag'. Either include it or remove the dependency array.",["262"],"React Hook useCallback has a missing dependency: 'setTags'. Either include it or remove the dependency array. If 'setTags' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["263"],"React Hook useEffect has a missing dependency: 'onScroll'. Either include it or remove the dependency array.",["264"],"React Hook useEffect has a missing dependency: 'checkedOnlyBookMark'. Either include it or remove the dependency array.",["265"],"no-global-assign","no-unsafe-negation",{"desc":"266","fix":"267"},{"desc":"268","fix":"269"},{"desc":"270","fix":"271"},{"desc":"272","fix":"273"},{"desc":"274","fix":"275"},{"desc":"276","fix":"277"},{"desc":"278","fix":"279"},{"desc":"280","fix":"281"},{"desc":"282","fix":"283"},{"desc":"284","fix":"285"},{"desc":"286","fix":"287"},{"desc":"288","fix":"289"},{"desc":"290","fix":"291"},{"desc":"292","fix":"293"},{"desc":"294","fix":"295"},{"desc":"296","fix":"297"},{"desc":"298","fix":"299"},{"desc":"300","fix":"301"},"Update the dependencies array to be: [handleClickProfileOutside, profilePopup]",{"range":"302","text":"303"},"Update the dependencies array to be: [checkBookmarked, loading]",{"range":"304","text":"305"},"Update the dependencies array to be: [getPost]",{"range":"306","text":"307"},"Update the dependencies array to be: [checkUserVaild]",{"range":"308","text":"309"},"Update the dependencies array to be: [addArticles]",{"range":"310","text":"311"},"Update the dependencies array to be: [loggedIn, articles, selectedCategory, filterArticles]",{"range":"312","text":"313"},"Update the dependencies array to be: [reverseArticles]",{"range":"314","text":"315"},"Update the dependencies array to be: [countPosts]",{"range":"316","text":"317"},"Update the dependencies array to be: [getUserBookMark, loggedIn, userObj]",{"range":"318","text":"319"},"Update the dependencies array to be: [catePopup, handleClickCategoryOutside]",{"range":"320","text":"321"},"Update the dependencies array to be: [handleClickTagOutside, tagPopup]",{"range":"322","text":"323"},"Update the dependencies array to be: [loadCategory]",{"range":"324","text":"325"},"Update the dependencies array to be: [categories, setCategories]",{"range":"326","text":"327"},"Update the dependencies array to be: [getBookmarkCount, getPostCount]",{"range":"328","text":"329"},"Update the dependencies array to be: [loadTag]",{"range":"330","text":"331"},"Update the dependencies array to be: [setTags, tags]",{"range":"332","text":"333"},"Update the dependencies array to be: [loadable, onScroll]",{"range":"334","text":"335"},"Update the dependencies array to be: [checkedOnlyBookMark, onlyMarkCheck]",{"range":"336","text":"337"},[704,718],"[handleClickProfileOutside, profilePopup]",[1152,1161],"[checkBookmarked, loading]",[3765,3767],"[getPost]",[1971,1973],"[checkUserVaild]",[3847,3849],"[addArticles]",[3904,3942],"[loggedIn, articles, selectedCategory, filterArticles]",[3996,4005],"[reverseArticles]",[4054,4072],"[countPosts]",[4128,4147],"[getUserBookMark, loggedIn, userObj]",[1715,1726],"[catePopup, handleClickCategoryOutside]",[1850,1860],"[handleClickTagOutside, tagPopup]",[1943,1945],"[loadCategory]",[2270,2282],"[categories, setCategories]",[1494,1496],"[getBookmarkCount, getPostCount]",[1620,1622],"[loadTag]",[1924,1930],"[setTags, tags]",[746,756],"[loadable, onScroll]",[1518,1533],"[checkedOnlyBookMark, onlyMarkCheck]"]